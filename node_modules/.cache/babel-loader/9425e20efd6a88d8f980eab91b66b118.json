{"remainingRequest":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/thread-loader/dist/cjs.js!/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js!/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/operations.js","dependencies":[{"path":"/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/operations.js","mtime":1600774478000},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/thread-loader/dist/cjs.js","mtime":1599786627944},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js","mtime":1599578972213}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport wallet from \"./wallet\";\nimport Decimal from \"decimal.js\";\nimport abis from \"@/utils/web3/contractABI/abis\";\nimport * as constant from \"@/utils/web3/constant\";\nimport { onChainCall, offChainCall, callByTrxTransactionBuilder } from \"./common\";\nvar contracts = null;\nvar tokenDecimals = constant.defaultDecimals;\nvar trc20USDTDecimals = constant.trc20USDTDecimals;\nvar decimals6Used = {\n  \"TRX\": trc20USDTDecimals,\n  \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\": trc20USDTDecimals,\n  \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\": trc20USDTDecimals,\n  \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\": trc20USDTDecimals\n};\n\nfunction isTrxPool(pid) {\n  return constant.uniAddrs[pid] === \"TRX\";\n}\n\nfunction loadContract() {\n  if (contracts === null) {\n    var _tronWeb = wallet.getWeb3Instance();\n\n    contracts = {\n      base: _tronWeb.contract(abis.erc20, constant.baseTokenAddr),\n      pool: _tronWeb.contract(abis.pool, constant.poolAddr),\n      unis: []\n    };\n\n    for (var i = 0; i < constant.uniAddrs.length; i++) {\n      contracts.unis.push(_tronWeb.contract(abis.erc20, constant.uniAddrs[i]));\n    }\n  }\n}\n\nfunction commonApprove(_x, _x2) {\n  return _commonApprove.apply(this, arguments);\n}\n\nfunction _commonApprove() {\n  _commonApprove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(contract, spender) {\n    var maxApprove;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Decimal.set({\n              toExpPos: 256\n            });\n            maxApprove = new Decimal(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n            _context.next = 4;\n            return onChainCall(contract, \"approve\", [spender, maxApprove.toString()]);\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _commonApprove.apply(this, arguments);\n}\n\nfunction enableDeposit(_x3) {\n  return _enableDeposit.apply(this, arguments);\n}\n\nfunction _enableDeposit() {\n  _enableDeposit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(pid) {\n    var uni;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            loadContract();\n            uni = contracts.unis[pid];\n            return _context2.abrupt(\"return\", commonApprove(uni, constant.poolAddr));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _enableDeposit.apply(this, arguments);\n}\n\nfunction commonERC20Balance(_x4, _x5, _x6) {\n  return _commonERC20Balance.apply(this, arguments);\n}\n\nfunction _commonERC20Balance() {\n  _commonERC20Balance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(contract, address, outDecimal) {\n    var result, decimals;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return callByTrxTransactionBuilder(contract.address, \"balanceOf(address)\", [{\n              type: \"address\",\n              value: address\n            }], null);\n\n          case 2:\n            result = _context3.sent;\n\n            if (result !== null) {\n              decimals = decimals6Used[contract.address] || tokenDecimals;\n              result = new Decimal(\"0x\" + result[0]).div(decimals);\n            } else {\n              result = new Decimal(0);\n            }\n\n            return _context3.abrupt(\"return\", outDecimal ? result : result.toDP(6, Decimal.ROUND_DOWN).toString());\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _commonERC20Balance.apply(this, arguments);\n}\n\nfunction deposit(_x7, _x8, _x9) {\n  return _deposit.apply(this, arguments);\n}\n\nfunction _deposit() {\n  _deposit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(pid, amount, stakeTokenAddr) {\n    var decimals, trx;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 2:\n            loadContract();\n            stakeTokenAddr = tronWeb.address.fromHex(stakeTokenAddr);\n            Decimal.set({\n              toExpPos: 256\n            });\n            decimals = decimals6Used[stakeTokenAddr] || tokenDecimals;\n            trx = \"0\";\n\n            if (isTrxPool(pid)) {\n              trx = new Decimal(amount).toDP(6, Decimal.ROUND_FLOOR).toString();\n              amount = \"0\";\n            } else {\n              amount = new Decimal(amount).mul(decimals);\n            }\n\n            _context4.next = 10;\n            return onChainCall(contracts.pool, \"deposit\", [pid, amount.toString()], trx);\n\n          case 10:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _deposit.apply(this, arguments);\n}\n\nfunction withdraw(_x10, _x11, _x12) {\n  return _withdraw.apply(this, arguments);\n}\n\nfunction _withdraw() {\n  _withdraw = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(pid, amount, stakeTokenAddr) {\n    var decimals;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 2:\n            loadContract();\n            stakeTokenAddr = tronWeb.address.fromHex(stakeTokenAddr);\n            Decimal.set({\n              toExpPos: 256\n            });\n            decimals = decimals6Used[stakeTokenAddr] || tokenDecimals;\n            amount = amount.mul(decimals);\n            _context5.next = 9;\n            return onChainCall(contracts.pool, \"collect\", [pid, amount.toString()]);\n\n          case 9:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 10:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _withdraw.apply(this, arguments);\n}\n\nfunction commonContractRead(_x13, _x14) {\n  return _commonContractRead.apply(this, arguments);\n}\n\nfunction _commonContractRead() {\n  _commonContractRead = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(contract, method) {\n    var param,\n        defVal,\n        owner,\n        result,\n        _args6 = arguments;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            param = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : [];\n            defVal = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : null;\n\n            if (wallet.isConnected()) {\n              _context6.next = 4;\n              break;\n            }\n\n            return _context6.abrupt(\"return\", defVal);\n\n          case 4:\n            loadContract();\n            owner = wallet.getAccount();\n            _context6.next = 8;\n            return offChainCall(contract, owner, method, param);\n\n          case 8:\n            result = _context6.sent;\n            return _context6.abrupt(\"return\", result !== null ? result : defVal);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _commonContractRead.apply(this, arguments);\n}\n\nfunction poolInfo(_x15) {\n  return _poolInfo.apply(this, arguments);\n}\n\nfunction _poolInfo() {\n  _poolInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(pid) {\n    var owner, pool, user, userToCollect, poolToCollect, poolWeightPercent, stakedToken, decimals, uni, uniBalance, orgStake;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context7.next = 2;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", false);\n\n          case 2:\n            if (!(pid >= constant.uniAddrs.length)) {\n              _context7.next = 4;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", false);\n\n          case 4:\n            loadContract();\n            owner = wallet.getAccount();\n            _context7.next = 8;\n            return commonContractRead(contracts.pool, \"pools\", [pid], 0);\n\n          case 8:\n            pool = _context7.sent;\n            _context7.next = 11;\n            return commonContractRead(contracts.pool, \"users\", [pid, owner], {\n              stakeIn: 0\n            });\n\n          case 11:\n            user = _context7.sent;\n            _context7.next = 14;\n            return commonContractRead(contracts.pool, \"toBeCollectedOf\", [pid, owner], 0);\n\n          case 14:\n            userToCollect = _context7.sent;\n            _context7.next = 17;\n            return commonContractRead(contracts.pool, \"toBeCollectedOfPool\", [pid], 0);\n\n          case 17:\n            poolToCollect = _context7.sent;\n            _context7.next = 20;\n            return commonContractRead(contracts.pool, \"poolWeight\", [pid], 0);\n\n          case 20:\n            poolWeightPercent = _context7.sent;\n            stakedToken = tronWeb.address.fromHex(pool.stakingToken);\n            decimals = decimals6Used[stakedToken] || tokenDecimals;\n            uni = contracts.unis[pid];\n            uniBalance = \"0\";\n\n            if (!uni.address) {\n              _context7.next = 31;\n              break;\n            }\n\n            _context7.next = 28;\n            return commonERC20Balance(uni, owner, false);\n\n          case 28:\n            uniBalance = _context7.sent;\n            _context7.next = 36;\n            break;\n\n          case 31:\n            if (!isTrxPool(pid)) {\n              _context7.next = 36;\n              break;\n            }\n\n            _context7.next = 34;\n            return tronWeb.trx.getBalance(owner);\n\n          case 34:\n            uniBalance = _context7.sent;\n            uniBalance = new Decimal(uniBalance).div(1e6).toString();\n\n          case 36:\n            orgStake = new Decimal(user.stakeIn.toString()).div(decimals);\n            user.stakeIn = new Decimal(user.stakeIn.toString()).div(decimals).toString();\n            poolToCollect = new Decimal(poolToCollect.toString()).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString();\n            userToCollect = new Decimal(userToCollect.toString()).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString();\n            pool.weight = pool.weight.toString();\n            pool.staked = new Decimal(pool.staked.toString()).div(decimals).toString();\n            poolWeightPercent = new Decimal(poolWeightPercent.toString()).div(1e18).toString();\n            return _context7.abrupt(\"return\", {\n              pool: pool,\n              user: user,\n              poolToCollect: poolToCollect,\n              userToCollect: userToCollect,\n              poolWeightPercent: poolWeightPercent,\n              orgStake: orgStake,\n              uniBalance: uniBalance\n            });\n\n          case 44:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _poolInfo.apply(this, arguments);\n}\n\nfunction commonApproveCheck(_x16, _x17) {\n  return _commonApproveCheck.apply(this, arguments);\n}\n\nfunction _commonApproveCheck() {\n  _commonApproveCheck = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(token, to) {\n    var owner, result, useDecimals, amount;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context8.next = 2;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n            owner = wallet.getAccount();\n            _context8.next = 6;\n            return callByTrxTransactionBuilder(token.address, \"allowance(address,address)\", [{\n              type: \"address\",\n              value: owner\n            }, {\n              type: \"address\",\n              value: to\n            }], null);\n\n          case 6:\n            result = _context8.sent;\n            useDecimals = tokenDecimals;\n\n            if (decimals6Used[token.address]) {\n              useDecimals = trc20USDTDecimals;\n            }\n\n            if (!(result !== null)) {\n              _context8.next = 14;\n              break;\n            }\n\n            amount = new Decimal(\"0x\" + result[0].toString()).div(useDecimals);\n            return _context8.abrupt(\"return\", amount.gt(0));\n\n          case 14:\n            return _context8.abrupt(\"return\", false);\n\n          case 15:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _commonApproveCheck.apply(this, arguments);\n}\n\nfunction isPoolEnable(_x18) {\n  return _isPoolEnable.apply(this, arguments);\n}\n\nfunction _isPoolEnable() {\n  _isPoolEnable = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(pid) {\n    var uni;\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context9.next = 2;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n\n            if (!isTrxPool(pid)) {\n              _context9.next = 5;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", true);\n\n          case 5:\n            _context9.prev = 5;\n            uni = contracts.unis[pid];\n            _context9.next = 9;\n            return commonApproveCheck(uni, constant.poolAddr);\n\n          case 9:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 12:\n            _context9.prev = 12;\n            _context9.t0 = _context9[\"catch\"](5);\n            return _context9.abrupt(\"return\", false);\n\n          case 15:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[5, 12]]);\n  }));\n  return _isPoolEnable.apply(this, arguments);\n}\n\nfunction getBlockNum() {\n  return _getBlockNum.apply(this, arguments);\n}\n\nfunction _getBlockNum() {\n  _getBlockNum = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n    var web3Instance;\n    return regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context10.next = 2;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", 0);\n\n          case 2:\n            loadContract();\n            web3Instance = wallet.getWeb3Instance();\n            _context10.next = 6;\n            return web3Instance.trx.getCurrentBlock().then(function (r) {\n              return r.block_header.raw_data.number;\n            }).catch(function (_) {\n              return 0;\n            });\n\n          case 6:\n            return _context10.abrupt(\"return\", _context10.sent);\n\n          case 7:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _getBlockNum.apply(this, arguments);\n}\n\nfunction userTokenBalance() {\n  return _userTokenBalance.apply(this, arguments);\n}\n\nfunction _userTokenBalance() {\n  _userTokenBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n    var user;\n    return regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context11.next = 2;\n              break;\n            }\n\n            return _context11.abrupt(\"return\", 0);\n\n          case 2:\n            loadContract();\n            user = wallet.getAccount();\n            return _context11.abrupt(\"return\", commonERC20Balance(contracts.base, user, false));\n\n          case 5:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _userTokenBalance.apply(this, arguments);\n}\n\nfunction userUniBalance(_x19) {\n  return _userUniBalance.apply(this, arguments);\n}\n\nfunction _userUniBalance() {\n  _userUniBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(pid) {\n    var user, balance, uni;\n    return regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context12.next = 2;\n              break;\n            }\n\n            return _context12.abrupt(\"return\", 0);\n\n          case 2:\n            loadContract();\n            user = wallet.getAccount();\n\n            if (!isTrxPool(pid)) {\n              _context12.next = 9;\n              break;\n            }\n\n            _context12.next = 7;\n            return tronWeb.trx.getBalance(user).catch(function (e) {\n              return 0;\n            });\n\n          case 7:\n            balance = _context12.sent;\n            return _context12.abrupt(\"return\", new Decimal(balance).div(1e6).toString());\n\n          case 9:\n            uni = contracts.unis[pid];\n            return _context12.abrupt(\"return\", commonERC20Balance(uni, user, false));\n\n          case 11:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _userUniBalance.apply(this, arguments);\n}\n\nfunction poolCount() {\n  return _poolCount.apply(this, arguments);\n}\n\nfunction _poolCount() {\n  _poolCount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            if (wallet.isConnected()) {\n              _context13.next = 2;\n              break;\n            }\n\n            return _context13.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n            return _context13.abrupt(\"return\", commonContractRead(contracts.pool, \"poolsCount\", []));\n\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _poolCount.apply(this, arguments);\n}\n\nexport default {\n  poolInfo: poolInfo,\n  enableDeposit: enableDeposit,\n  deposit: deposit,\n  withdraw: withdraw,\n  isPoolEnable: isPoolEnable,\n  getBlockNum: getBlockNum,\n  userTokenBalance: userTokenBalance,\n  userUniBalance: userUniBalance,\n  poolCount: poolCount,\n  commonERC20Balance: commonERC20Balance,\n  commonApprove: commonApprove,\n  contracts: contracts\n};",{"version":3,"sources":["/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/operations.js"],"names":["wallet","Decimal","abis","constant","onChainCall","offChainCall","callByTrxTransactionBuilder","contracts","tokenDecimals","defaultDecimals","trc20USDTDecimals","decimals6Used","isTrxPool","pid","uniAddrs","loadContract","tronWeb","getWeb3Instance","base","contract","erc20","baseTokenAddr","pool","poolAddr","unis","i","length","push","commonApprove","spender","set","toExpPos","maxApprove","toString","enableDeposit","isConnected","uni","commonERC20Balance","address","outDecimal","type","value","result","decimals","div","toDP","ROUND_DOWN","deposit","amount","stakeTokenAddr","fromHex","trx","ROUND_FLOOR","mul","withdraw","commonContractRead","method","param","defVal","owner","getAccount","poolInfo","stakeIn","user","userToCollect","poolToCollect","poolWeightPercent","stakedToken","stakingToken","uniBalance","getBalance","orgStake","weight","staked","commonApproveCheck","token","to","useDecimals","gt","isPoolEnable","getBlockNum","web3Instance","getCurrentBlock","then","r","block_header","raw_data","number","catch","_","userTokenBalance","userUniBalance","e","balance","poolCount"],"mappings":"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","sourcesContent":["import wallet from \"./wallet\";\nimport Decimal from \"decimal.js\"\nimport abis from \"@/utils/web3/contractABI/abis\";\nimport * as constant from \"@/utils/web3/constant\";\n\nimport {onChainCall, offChainCall, callByTrxTransactionBuilder} from \"./common\";\n\nlet contracts = null\nconst tokenDecimals = constant.defaultDecimals\nconst trc20USDTDecimals = constant.trc20USDTDecimals\n\nlet decimals6Used = {\n  \"TRX\": trc20USDTDecimals,\n  \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\": trc20USDTDecimals,\n  \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\": trc20USDTDecimals,\n  \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\": trc20USDTDecimals,\n}\n\nfunction isTrxPool(pid) {\n  return (constant.uniAddrs[pid]  === \"TRX\")\n}\n\nfunction loadContract() {\n  if(contracts === null) {\n    let tronWeb = wallet.getWeb3Instance()\n    contracts = {\n      base: tronWeb.contract(abis.erc20, constant.baseTokenAddr),\n      pool: tronWeb.contract(abis.pool, constant.poolAddr),\n      unis: [],\n\n    }\n\n    for(let i = 0; i < constant.uniAddrs.length; i++) {\n      contracts.unis.push(\n        tronWeb.contract(abis.erc20, constant.uniAddrs[i])\n      )\n    }\n  }\n}\n\nasync function commonApprove(contract, spender) {\n  Decimal.set({ toExpPos: 256 })\n  let maxApprove = new Decimal(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n\n  return await onChainCall(\n    contract,\n    \"approve\",\n    [spender, maxApprove.toString()],\n  )\n}\n\nasync function enableDeposit(pid) {\n  if(!wallet.isConnected()) {\n    return\n  }\n  \n  loadContract()\n\n  let uni = contracts.unis[pid]\n  return commonApprove(uni, constant.poolAddr)\n}\n\nasync function commonERC20Balance(contract, address, outDecimal) {\n  let result = await callByTrxTransactionBuilder(contract.address, \"balanceOf(address)\",\n    [{type:\"address\", value: address}], null)\n\n  if(result !== null) {\n    let decimals = decimals6Used[contract.address] || tokenDecimals\n    result = new Decimal(\"0x\" + result[0]).div(decimals)\n  } else {\n    result = new Decimal(0)\n  }\n\n  return outDecimal ? result:result.toDP(6, Decimal.ROUND_DOWN).toString()\n}\n\nasync function deposit(pid, amount, stakeTokenAddr) {\n  if(!wallet.isConnected()) {\n    return\n  }\n\n  loadContract()\n\n  stakeTokenAddr = tronWeb.address.fromHex(stakeTokenAddr)\n  Decimal.set({ toExpPos: 256 })\n  let decimals = decimals6Used[stakeTokenAddr] || tokenDecimals\n\n  let trx =  \"0\"\n  if(isTrxPool(pid)) {\n    trx = new Decimal(amount).toDP(6, Decimal.ROUND_FLOOR).toString()\n    amount = \"0\"\n\n  } else {\n    amount = new Decimal(amount).mul(decimals)\n  }\n\n  return await onChainCall(\n    contracts.pool,\n    \"deposit\",\n    [pid, amount.toString()],\n    trx,\n  )\n}\n\nasync function withdraw(pid, amount, stakeTokenAddr) {\n  if(!wallet.isConnected()) {\n    return\n  }\n\n  loadContract()\n\n  stakeTokenAddr = tronWeb.address.fromHex(stakeTokenAddr)\n  Decimal.set({ toExpPos: 256 })\n  let decimals = decimals6Used[stakeTokenAddr] || tokenDecimals\n\n  amount = amount.mul(decimals)\n\n  return await onChainCall(\n    contracts.pool,\n    \"collect\",\n    [pid, amount.toString()],\n  )\n}\n\nasync function commonContractRead(contract, method, param = [], defVal = null) {\n  if(!wallet.isConnected()) {\n    return defVal\n  }\n\n  loadContract()\n\n  let owner = wallet.getAccount()\n  let result = await offChainCall(contract, owner, method, param)\n\n  return result !== null ? result:defVal\n}\n\nasync function poolInfo(pid) {\n  if(!wallet.isConnected()) {\n    return false\n  }\n\n  if(pid >= constant.uniAddrs.length) {\n    return false\n  }\n\n  loadContract()\n\n  let owner = wallet.getAccount()\n  let pool = await commonContractRead(contracts.pool, \"pools\", [pid], 0)\n  let user = await commonContractRead(contracts.pool, \"users\", [pid, owner], {stakeIn: 0,})\n  let userToCollect = await commonContractRead(contracts.pool, \"toBeCollectedOf\", [pid, owner], 0)\n  let poolToCollect = await commonContractRead(contracts.pool, \"toBeCollectedOfPool\", [pid], 0)\n  let poolWeightPercent = await commonContractRead(contracts.pool, \"poolWeight\", [pid], 0)\n\n  let stakedToken = tronWeb.address.fromHex(pool.stakingToken)\n  let decimals = decimals6Used[stakedToken] || tokenDecimals\n\n  let uni = contracts.unis[pid]\n  let uniBalance = \"0\"\n  if(uni.address) {\n    uniBalance = await commonERC20Balance(uni, owner, false)\n  } else {\n    if(isTrxPool(pid)) {\n      uniBalance = await tronWeb.trx.getBalance(owner)\n      uniBalance = new Decimal(uniBalance).div(1e6).toString()\n    }\n  }\n\n  let orgStake = new Decimal(user.stakeIn.toString()).div(decimals)\n  user.stakeIn = new Decimal(user.stakeIn.toString()).div(decimals).toString()\n\n  poolToCollect = new Decimal(poolToCollect.toString()).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString()\n  userToCollect = new Decimal(userToCollect.toString()).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString()\n  pool.weight = pool.weight.toString()\n  pool.staked = new Decimal(pool.staked.toString()).div(decimals).toString()\n  poolWeightPercent = new Decimal(poolWeightPercent.toString()).div(1e18).toString()\n\n  return {\n    pool,\n    user,\n    poolToCollect,\n    userToCollect,\n    poolWeightPercent,\n    orgStake,\n    uniBalance,\n  }\n}\n\nasync function commonApproveCheck(token, to) {\n  if(!wallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  let owner = wallet.getAccount()\n  let result = await callByTrxTransactionBuilder(token.address, \"allowance(address,address)\",\n    [{type:\"address\", value: owner}, {type:\"address\", value: to}], null)\n\n  let  useDecimals = tokenDecimals\n  if(decimals6Used[token.address]) {\n    useDecimals = trc20USDTDecimals\n  }\n\n  if(result !== null) {\n    let amount = new Decimal(\"0x\" + result[0].toString()).div(useDecimals)\n    return amount.gt(0)\n  } else {\n    return false\n  }\n}\n\nasync function isPoolEnable(pid) {\n  if(!wallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  if(isTrxPool(pid)) {\n    return true\n  }\n\n  try {\n    let uni = contracts.unis[pid]\n    return await commonApproveCheck(uni, constant.poolAddr);\n  } catch (e) {\n    return false\n  }\n}\n\nasync function getBlockNum() {\n  if(!wallet.isConnected()) {\n    return 0\n  }\n\n  loadContract()\n\n  let web3Instance = wallet.getWeb3Instance()\n  return await web3Instance.trx.getCurrentBlock().then(r=>{\n    return r.block_header.raw_data.number\n  }).catch(_=>{return 0})\n}\n\nasync function userTokenBalance() {\n  if(!wallet.isConnected()) {\n    return 0\n  }\n\n  loadContract()\n  let user = wallet.getAccount()\n  return commonERC20Balance(contracts.base, user, false)\n}\n\nasync function userUniBalance(pid) {\n  if(!wallet.isConnected()) {\n    return 0\n  }\n\n  loadContract()\n\n  let user = wallet.getAccount()\n\n  if(isTrxPool(pid)) {\n    let balance = await tronWeb.trx.getBalance(user)\n      .catch(e=>{return 0})\n\n    return new Decimal(balance).div(1e6).toString()\n  }\n\n  let uni = contracts.unis[pid]\n  return commonERC20Balance(uni, user, false)\n}\n\nasync function poolCount() {\n  if(!wallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  return commonContractRead(contracts.pool, \"poolsCount\", [])\n}\n\nexport default {\n  poolInfo,\n  enableDeposit,\n  deposit,\n  withdraw,\n  isPoolEnable,\n  getBlockNum,\n  userTokenBalance,\n  userUniBalance,\n  poolCount,\n  commonERC20Balance,\n  commonApprove,\n  contracts,\n}\n"]}]}