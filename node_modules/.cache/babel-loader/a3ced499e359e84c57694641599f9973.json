{"remainingRequest":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/babel-loader/lib/index.js!/Users/lyx/WebstormProjects/avg-geyser/src/utils/web3/common.js","dependencies":[{"path":"/Users/lyx/WebstormProjects/avg-geyser/src/utils/web3/common.js","mtime":1599989350000},{"path":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/babel-loader/lib/index.js","mtime":1599578972213}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/lyx/WebstormProjects/avg-geyser/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/lyx/WebstormProjects/avg-geyser/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\nvar transactionResultGetter = function transactionResultGetter(resolve, err, data) {\n  var result = null;\n\n  if (!err) {\n    result = data;\n  }\n\n  resolve(result);\n};\n\nfunction getContractMethod(contract, methodName, param) {\n  var method = contract.methods[methodName];\n\n  if (!method) {\n    return null;\n  }\n\n  var prop = method.apply(void 0, _toConsumableArray(param))._method;\n\n  return {\n    prop: prop,\n    func: method\n  };\n}\n\nfunction onChainCall(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n  return _onChainCall.apply(this, arguments);\n}\n\nfunction _onChainCall() {\n  _onChainCall = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(contract, from, methodName, param, amount, gasLimit, gasPrice) {\n    var method, sendParam;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            param = param || [];\n            method = getContractMethod(contract, methodName, param);\n\n            if (method) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 4:\n            sendParam = {\n              from: from,\n              gasPrice: gasPrice,\n              gas: gasLimit\n            };\n\n            if (method.prop.payable) {\n              sendParam.value = web3.utils.toWei(amount);\n            }\n\n            _context.next = 8;\n            return new Promise(function (rs) {\n              method.func.apply(method, _toConsumableArray(param)).send(sendParam, function (err, tx) {\n                transactionResultGetter(rs, err, tx);\n              }).catch(function (e) {\n                transactionResultGetter(rs, e, null);\n              });\n            });\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _onChainCall.apply(this, arguments);\n}\n\nfunction offChainCall(_x8, _x9, _x10) {\n  return _offChainCall.apply(this, arguments);\n}\n\nfunction _offChainCall() {\n  _offChainCall = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(contract, from, methodName) {\n    var param,\n        method,\n        _args2 = arguments;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            param = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : [];\n            param = param || [];\n            method = getContractMethod(contract, methodName, param);\n\n            if (method) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", null);\n\n          case 5:\n            _context2.next = 7;\n            return new Promise(function (resolve) {\n              method.func.apply(method, _toConsumableArray(param)).call({\n                from: \"\"\n              }, function (err, result) {\n                transactionResultGetter(resolve, err, result);\n              }).catch(function (reason) {\n                console.log(\"????? ----> \", reason);\n                transactionResultGetter(resolve, reason, null);\n              });\n            });\n\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _offChainCall.apply(this, arguments);\n}\n\nexport { onChainCall, offChainCall };",{"version":3,"sources":["/Users/lyx/WebstormProjects/avg-geyser/src/utils/web3/common.js"],"names":["transactionResultGetter","resolve","err","data","result","getContractMethod","contract","methodName","param","method","methods","prop","_method","func","onChainCall","from","amount","gasLimit","gasPrice","sendParam","gas","payable","value","web3","utils","toWei","Promise","rs","send","tx","catch","e","offChainCall","call","reason","console","log"],"mappings":"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","sourcesContent":["let transactionResultGetter = function (resolve, err, data) {\n  let result = null\n  if(!err) {\n    result = data\n  }\n\n  resolve(result)\n}\n\nfunction getContractMethod(contract, methodName, param) {\n  let method = contract.methods[methodName]\n  if(!method) {\n    return null\n  }\n\n  let prop = method(...param)._method\n\n  return {\n    prop: prop,\n    func: method\n  }\n}\n\nasync function onChainCall(contract, from, methodName, param, amount, gasLimit, gasPrice) {\n  param = param || []\n\n  let method = getContractMethod(contract, methodName, param)\n  if(!method) {\n    return null\n  }\n\n  let sendParam = {\n    from: from,\n    gasPrice: gasPrice,\n    gas: gasLimit\n  }\n\n  if(method.prop.payable) {\n    sendParam.value = web3.utils.toWei(amount)\n  }\n\n  return await new Promise(rs => {\n    method.func(...param)\n      .send(sendParam, (err, tx) =>  {\n        transactionResultGetter(rs, err, tx)\n      })\n      .catch(e=>{\n        transactionResultGetter(rs, e, null)\n      })\n  })\n}\n\nasync function offChainCall(contract, from, methodName, param = []) {\n  param = param || []\n\n  let method = getContractMethod(contract, methodName, param)\n  if(!method) {\n    return null\n  }\n\n  return  await new Promise(resolve => {\n    method.func(...param).call({from: \"\"}, (err, result) => {\n      transactionResultGetter(resolve, err, result)\n    }).catch(reason => {\n      console.log(\"????? ----> \", reason)\n      transactionResultGetter(resolve, reason, null)\n    })\n  })\n}\n\nexport {\n  onChainCall,\n  offChainCall,\n}\n"]}]}