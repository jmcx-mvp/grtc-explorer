{"remainingRequest":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js!/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/ethWallet.js","dependencies":[{"path":"/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/ethWallet.js","mtime":1599834864000},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js","mtime":1599578972213}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from \"web3\";\nvar provider = null;\nvar web3Instance = null;\nvar currentChainId = null;\nvar currentAccount = null;\n\nfunction loadWallet() {\n  return _loadWallet.apply(this, arguments);\n}\n\nfunction _loadWallet() {\n  _loadWallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var accList;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return detectEthereumProvider();\n\n          case 2:\n            provider = _context.sent;\n\n            if (!provider) {\n              _context.next = 18;\n              break;\n            }\n\n            if (!(provider !== window.ethereum)) {\n              _context.next = 7;\n              break;\n            }\n\n            console.error('Do you have multiple wallets installed?');\n            return _context.abrupt(\"return\", null);\n\n          case 7:\n            if (!provider.isImToken) {\n              setupEventHandler();\n            }\n\n            web3Instance = new Web3(provider);\n            window.web3 = web3Instance;\n\n            if (!provider.isImToken) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 13;\n            return web3Instance.eth.getAccounts();\n\n          case 13:\n            accList = _context.sent;\n            currentAccount = accList[0];\n\n          case 15:\n            return _context.abrupt(\"return\", window.ethereum);\n\n          case 18:\n            console.log(\"no provider\");\n            return _context.abrupt(\"return\", null);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadWallet.apply(this, arguments);\n}\n\nfunction setupEventHandler() {\n  currentChainId = ethereum.chainId;\n  ethereum.on('chainChanged', handleChainChanged);\n\n  function handleChainChanged(_chainId) {// We recommend reloading the page, unless you must do otherwise\n    // window.location.reload();\n  }\n\n  ethereum.request({\n    method: 'eth_accounts'\n  }).then(handleAccountsChanged).catch(function (err) {\n    // Some unexpected error.\n    // For backwards compatibility reasons, if no accounts are available,\n    // eth_accounts will return an empty array.\n    console.error(err);\n  });\n  ethereum.on('accountsChanged', handleAccountsChanged);\n}\n\nfunction handleAccountsChanged(accounts) {\n  if (accounts.length === 0) {\n    currentAccount = null;\n  } else if (accounts[0] !== currentAccount) {\n    currentAccount = accounts[0];\n  }\n\n  return currentAccount;\n}\n\nfunction connect() {\n  return _connect.apply(this, arguments);\n}\n\nfunction _connect() {\n  _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var ret, accList;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!ethereum.isImToken) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.prev = 1;\n            _context2.next = 4;\n            return ethereum.enable().catch(function (err) {\n              console.log(err);\n              return null;\n            });\n\n          case 4:\n            ret = _context2.sent;\n\n            if (!(ret !== null)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 8;\n            return web3Instance.eth.getAccounts();\n\n          case 8:\n            accList = _context2.sent;\n            currentAccount = accList[0];\n\n          case 10:\n            return _context2.abrupt(\"return\", ret === null ? ret : true);\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](1);\n            return _context2.abrupt(\"return\", null);\n\n          case 16:\n            return _context2.abrupt(\"return\", ethereum.request({\n              method: 'eth_requestAccounts'\n            }).then(function (accounts) {\n              return handleAccountsChanged(accounts);\n            }).catch(function (err) {\n              if (err.code === 4001) {\n                // EIP-1193 userRejectedRequest error\n                // If this happens, the user rejected the connection request.\n                console.log('Please connect to MetaMask.');\n              } else {\n                console.error(err);\n              }\n\n              return null;\n            }));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 13]]);\n  }));\n  return _connect.apply(this, arguments);\n}\n\nfunction isConnected() {\n  return !!currentAccount;\n}\n\nfunction getAccount() {\n  return currentAccount;\n}\n\nfunction getWeb3Instance() {\n  return web3Instance;\n}\n\nexport default {\n  loadWallet: loadWallet,\n  connect: connect,\n  isConnected: isConnected,\n  getWeb3Instance: getWeb3Instance,\n  getAccount: getAccount\n};",{"version":3,"sources":["/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/ethWallet.js"],"names":["detectEthereumProvider","Web3","provider","web3Instance","currentChainId","currentAccount","loadWallet","window","ethereum","console","error","isImToken","setupEventHandler","web3","eth","getAccounts","accList","log","chainId","on","handleChainChanged","_chainId","request","method","then","handleAccountsChanged","catch","err","accounts","length","connect","enable","ret","code","isConnected","getAccount","getWeb3Instance"],"mappings":"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","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from \"web3\";\n\nlet provider = null\nlet web3Instance = null\n\nlet currentChainId = null;\nlet currentAccount = null;\n\nasync function loadWallet() {\n  provider = await detectEthereumProvider();\n\n  if (provider) {\n    if (provider !== window.ethereum) {\n      console.error('Do you have multiple wallets installed?');\n      return null\n    }\n\n    if(!provider.isImToken) {\n      setupEventHandler()\n    }\n\n    web3Instance = new Web3(provider)\n    window.web3 = web3Instance\n\n    if(provider.isImToken) {\n      let accList = await web3Instance.eth.getAccounts()\n      currentAccount = accList[0]\n    }\n\n    return window.ethereum\n  } else {\n    console.log(\"no provider\")\n    return null\n  }\n}\n\nfunction setupEventHandler() {\n  currentChainId = ethereum.chainId\n\n  ethereum.on('chainChanged', handleChainChanged);\n\n  function handleChainChanged(_chainId) {\n    // We recommend reloading the page, unless you must do otherwise\n    // window.location.reload();\n  }\n\n  ethereum\n    .request({ method: 'eth_accounts' })\n    .then(handleAccountsChanged)\n    .catch((err) => {\n      // Some unexpected error.\n      // For backwards compatibility reasons, if no accounts are available,\n      // eth_accounts will return an empty array.\n      console.error(err);\n    });\n\n\n  ethereum.on('accountsChanged', handleAccountsChanged);\n}\n\nfunction handleAccountsChanged(accounts) {\n  if (accounts.length === 0) {\n    currentAccount = null\n  } else if (accounts[0] !== currentAccount) {\n    currentAccount = accounts[0];\n  }\n\n  return currentAccount\n}\n\nasync function connect() {\n  if(ethereum.isImToken) {\n    try {\n      // Request account access if needed\n      let ret = await ethereum.enable()\n        .catch((err) => {\n          console.log(err)\n          return null\n        })\n\n      if(ret !== null) {\n        let accList = await web3Instance.eth.getAccounts()\n        currentAccount = accList[0]\n      }\n\n      return (ret === null) ? ret:true\n\n    } catch (error) {\n      // User denied account access...\n      return null\n    }\n  }\n\n  return ethereum\n    .request({ method: 'eth_requestAccounts' })\n    .then((accounts)=>{return handleAccountsChanged(accounts)})\n    .catch((err) => {\n      if (err.code === 4001) {\n        // EIP-1193 userRejectedRequest error\n        // If this happens, the user rejected the connection request.\n        console.log('Please connect to MetaMask.');\n      } else {\n        console.error(err);\n      }\n\n      return null\n    });\n}\n\nfunction isConnected() {\n  return !!currentAccount\n}\n\nfunction getAccount() {\n  return currentAccount\n}\n\nfunction getWeb3Instance() {\n  return web3Instance\n}\n\nexport default {\n  loadWallet,\n  connect,\n  isConnected,\n  getWeb3Instance,\n  getAccount,\n}\n"]}]}