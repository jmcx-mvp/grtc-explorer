{"remainingRequest":"/Users/lyx/WebstormProjects/idc-geyser-v2/node_modules/babel-loader/lib/index.js!/Users/lyx/WebstormProjects/idc-geyser-v2/src/utils/web3/operations.js","dependencies":[{"path":"/Users/lyx/WebstormProjects/idc-geyser-v2/src/utils/web3/operations.js","mtime":1600071690000},{"path":"/Users/lyx/WebstormProjects/idc-geyser-v2/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/idc-geyser-v2/node_modules/babel-loader/lib/index.js","mtime":1599578972213}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/lyx/WebstormProjects/idc-geyser-v2/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport ETHWallet from \"./ethWallet\";\nimport Decimal from \"decimal.js\";\nimport abis from \"@/utils/web3/contractABI/abis\";\nimport * as constant from \"@/utils/web3/constant\";\nimport { onChainCall, offChainCall } from \"./common\";\nvar contracts = null;\nvar tokenDecimals = constant.defaultDecimals;\n\nfunction loadContract() {\n  if (contracts === null) {\n    var web3Instance = ETHWallet.getWeb3Instance();\n    contracts = {\n      base: new web3Instance.eth.Contract(abis.erc20, constant.baseTokenAddr),\n      pool: new web3Instance.eth.Contract(abis.pool, constant.poolAddr),\n      unis: []\n    };\n\n    for (var i = 0; i < constant.uniAddrs.length; i++) {\n      contracts.unis.push(new web3Instance.eth.Contract(abis.erc20, constant.uniAddrs[i]));\n    }\n  }\n}\n\nfunction commonApprove(_x, _x2) {\n  return _commonApprove.apply(this, arguments);\n}\n\nfunction _commonApprove() {\n  _commonApprove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(contract, spender) {\n    var maxApprove;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Decimal.set({\n              toExpPos: 256\n            });\n            maxApprove = new Decimal(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n            _context.next = 4;\n            return onChainCall(contract, ETHWallet.getAccount(), \"approve\", [spender, maxApprove.toString()]);\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _commonApprove.apply(this, arguments);\n}\n\nfunction enableDeposit(_x3) {\n  return _enableDeposit.apply(this, arguments);\n}\n\nfunction _enableDeposit() {\n  _enableDeposit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(pid) {\n    var uni;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            loadContract();\n            uni = contracts.unis[pid];\n            return _context2.abrupt(\"return\", commonApprove(uni, constant.poolAddr));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _enableDeposit.apply(this, arguments);\n}\n\nfunction commonERC20Balance(_x4, _x5, _x6) {\n  return _commonERC20Balance.apply(this, arguments);\n}\n\nfunction _commonERC20Balance() {\n  _commonERC20Balance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(contract, address, outDecimal) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return offChainCall(contract, address, \"balanceOf\", [address]);\n\n          case 2:\n            result = _context3.sent;\n\n            if (result !== null) {\n              result = new Decimal(result).div(tokenDecimals);\n            } else {\n              result = new Decimal(0);\n            }\n\n            return _context3.abrupt(\"return\", outDecimal ? result : result.toDP(6, Decimal.ROUND_DOWN).toString());\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _commonERC20Balance.apply(this, arguments);\n}\n\nfunction deposit(_x7, _x8) {\n  return _deposit.apply(this, arguments);\n}\n\nfunction _deposit() {\n  _deposit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(pid, amount) {\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 2:\n            loadContract();\n            Decimal.set({\n              toExpPos: 256\n            });\n            amount = new Decimal(amount).mul(tokenDecimals);\n            _context4.next = 7;\n            return onChainCall(contracts.pool, ETHWallet.getAccount(), \"deposit\", [pid, amount.toString()], \"0\");\n\n          case 7:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _deposit.apply(this, arguments);\n}\n\nfunction withdraw(_x9, _x10) {\n  return _withdraw.apply(this, arguments);\n}\n\nfunction _withdraw() {\n  _withdraw = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(pid, amount) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 2:\n            loadContract();\n            Decimal.set({\n              toExpPos: 256\n            });\n            amount = amount.mul(tokenDecimals);\n            _context5.next = 7;\n            return onChainCall(contracts.pool, ETHWallet.getAccount(), \"collect\", [pid, amount.toString()]);\n\n          case 7:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _withdraw.apply(this, arguments);\n}\n\nfunction commonContractRead(_x11, _x12) {\n  return _commonContractRead.apply(this, arguments);\n}\n\nfunction _commonContractRead() {\n  _commonContractRead = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(contract, method) {\n    var param,\n        defVal,\n        owner,\n        result,\n        _args6 = arguments;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            param = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : [];\n            defVal = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : null;\n\n            if (ETHWallet.isConnected()) {\n              _context6.next = 4;\n              break;\n            }\n\n            return _context6.abrupt(\"return\", defVal);\n\n          case 4:\n            loadContract();\n            owner = ETHWallet.getAccount();\n            _context6.next = 8;\n            return offChainCall(contract, owner, method, param);\n\n          case 8:\n            result = _context6.sent;\n            return _context6.abrupt(\"return\", result !== null ? result : defVal);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _commonContractRead.apply(this, arguments);\n}\n\nfunction poolInfo(_x13) {\n  return _poolInfo.apply(this, arguments);\n}\n\nfunction _poolInfo() {\n  _poolInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(pid) {\n    var owner, pool, user, userToCollect, poolToCollect, totalWeight, uni, uniBalance, orgStake;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context7.next = 2;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n            owner = ETHWallet.getAccount();\n            _context7.next = 6;\n            return commonContractRead(contracts.pool, \"pools\", [pid], 0);\n\n          case 6:\n            pool = _context7.sent;\n            _context7.next = 9;\n            return commonContractRead(contracts.pool, \"users\", [pid, owner], {\n              stakeIn: 0\n            });\n\n          case 9:\n            user = _context7.sent;\n            _context7.next = 12;\n            return commonContractRead(contracts.pool, \"toBeCollectedOf\", [pid, owner], 0);\n\n          case 12:\n            userToCollect = _context7.sent;\n            _context7.next = 15;\n            return commonContractRead(contracts.pool, \"toBeCollectedOfPool\", [pid], 0);\n\n          case 15:\n            poolToCollect = _context7.sent;\n            _context7.next = 18;\n            return commonContractRead(contracts.pool, \"totalWeight\", [], 0);\n\n          case 18:\n            totalWeight = _context7.sent;\n            uni = contracts.unis[pid];\n            _context7.next = 22;\n            return commonERC20Balance(uni, owner, false);\n\n          case 22:\n            uniBalance = _context7.sent;\n            orgStake = new Decimal(user.stakeIn).div(tokenDecimals);\n            user.stakeIn = new Decimal(user.stakeIn).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString();\n            poolToCollect = new Decimal(poolToCollect).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString();\n            userToCollect = new Decimal(userToCollect).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString();\n            return _context7.abrupt(\"return\", {\n              pool: pool,\n              user: user,\n              poolToCollect: poolToCollect,\n              userToCollect: userToCollect,\n              totalWeight: totalWeight,\n              orgStake: orgStake,\n              uniBalance: uniBalance\n            });\n\n          case 28:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _poolInfo.apply(this, arguments);\n}\n\nfunction ethBalance(_x14) {\n  return _ethBalance.apply(this, arguments);\n}\n\nfunction _ethBalance() {\n  _ethBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(outDecimal) {\n    var address, result;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            address = ETHWallet.getAccount();\n            _context8.next = 3;\n            return ETHWallet.getWeb3Instance().eth.getBalance(address).catch(function (_) {\n              return null;\n            });\n\n          case 3:\n            result = _context8.sent;\n\n            if (result !== null) {\n              result = new Decimal(result).div(1e18);\n            } else {\n              result = result = new Decimal(0);\n            }\n\n            return _context8.abrupt(\"return\", outDecimal ? result : result.toDP(6, Decimal.ROUND_DOWN).toString());\n\n          case 6:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _ethBalance.apply(this, arguments);\n}\n\nfunction commonApproveCheck(_x15, _x16) {\n  return _commonApproveCheck.apply(this, arguments);\n}\n\nfunction _commonApproveCheck() {\n  _commonApproveCheck = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(token, to) {\n    var owner, result, amount;\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context9.next = 2;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n            owner = ETHWallet.getAccount();\n            _context9.next = 6;\n            return offChainCall(token, owner, \"allowance\", [owner, to]);\n\n          case 6:\n            result = _context9.sent;\n\n            if (!(result !== null)) {\n              _context9.next = 12;\n              break;\n            }\n\n            amount = new Decimal(result).div(tokenDecimals);\n            return _context9.abrupt(\"return\", amount.gt(0));\n\n          case 12:\n            return _context9.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _commonApproveCheck.apply(this, arguments);\n}\n\nfunction isPoolEnable(_x17) {\n  return _isPoolEnable.apply(this, arguments);\n}\n\nfunction _isPoolEnable() {\n  _isPoolEnable = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(pid) {\n    var uni;\n    return regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context10.next = 2;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n            _context10.prev = 3;\n            uni = contracts.unis[pid];\n            _context10.next = 7;\n            return commonApproveCheck(uni, constant.poolAddr);\n\n          case 7:\n            return _context10.abrupt(\"return\", _context10.sent);\n\n          case 10:\n            _context10.prev = 10;\n            _context10.t0 = _context10[\"catch\"](3);\n            return _context10.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[3, 10]]);\n  }));\n  return _isPoolEnable.apply(this, arguments);\n}\n\nfunction getBlockNum() {\n  return _getBlockNum.apply(this, arguments);\n}\n\nfunction _getBlockNum() {\n  _getBlockNum = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n    var web3Instance;\n    return regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context11.next = 2;\n              break;\n            }\n\n            return _context11.abrupt(\"return\", 0);\n\n          case 2:\n            loadContract();\n            web3Instance = ETHWallet.getWeb3Instance();\n            _context11.next = 6;\n            return web3Instance.eth.getBlockNumber().catch(function (_) {\n              return 0;\n            });\n\n          case 6:\n            return _context11.abrupt(\"return\", _context11.sent);\n\n          case 7:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _getBlockNum.apply(this, arguments);\n}\n\nfunction userTokenBalance() {\n  return _userTokenBalance.apply(this, arguments);\n}\n\nfunction _userTokenBalance() {\n  _userTokenBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n    var user;\n    return regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context12.next = 2;\n              break;\n            }\n\n            return _context12.abrupt(\"return\", 0);\n\n          case 2:\n            loadContract();\n            user = ETHWallet.getAccount();\n            return _context12.abrupt(\"return\", commonERC20Balance(contracts.base, user, false));\n\n          case 5:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _userTokenBalance.apply(this, arguments);\n}\n\nfunction userUniBalance(_x18) {\n  return _userUniBalance.apply(this, arguments);\n}\n\nfunction _userUniBalance() {\n  _userUniBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(pid) {\n    var uni, user;\n    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context13.next = 2;\n              break;\n            }\n\n            return _context13.abrupt(\"return\", 0);\n\n          case 2:\n            loadContract();\n            uni = contracts.unis[pid];\n            user = ETHWallet.getAccount();\n            return _context13.abrupt(\"return\", commonERC20Balance(uni, user, false));\n\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _userUniBalance.apply(this, arguments);\n}\n\nfunction poolCount() {\n  return _poolCount.apply(this, arguments);\n}\n\nfunction _poolCount() {\n  _poolCount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n    return regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            if (ETHWallet.isConnected()) {\n              _context14.next = 2;\n              break;\n            }\n\n            return _context14.abrupt(\"return\", false);\n\n          case 2:\n            loadContract();\n            return _context14.abrupt(\"return\", commonContractRead(contracts.pool, \"poolsCount\", []));\n\n          case 4:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _poolCount.apply(this, arguments);\n}\n\nexport default {\n  poolInfo: poolInfo,\n  enableDeposit: enableDeposit,\n  deposit: deposit,\n  withdraw: withdraw,\n  isPoolEnable: isPoolEnable,\n  getBlockNum: getBlockNum,\n  userTokenBalance: userTokenBalance,\n  userUniBalance: userUniBalance,\n  poolCount: poolCount\n};",{"version":3,"sources":["/Users/lyx/WebstormProjects/idc-geyser-v2/src/utils/web3/operations.js"],"names":["ETHWallet","Decimal","abis","constant","onChainCall","offChainCall","contracts","tokenDecimals","defaultDecimals","loadContract","web3Instance","getWeb3Instance","base","eth","Contract","erc20","baseTokenAddr","pool","poolAddr","unis","i","uniAddrs","length","push","commonApprove","contract","spender","set","toExpPos","maxApprove","getAccount","toString","enableDeposit","pid","isConnected","uni","commonERC20Balance","address","outDecimal","result","div","toDP","ROUND_DOWN","deposit","amount","mul","withdraw","commonContractRead","method","param","defVal","owner","poolInfo","stakeIn","user","userToCollect","poolToCollect","totalWeight","uniBalance","orgStake","ROUND_FLOOR","ethBalance","getBalance","catch","_","commonApproveCheck","token","to","gt","isPoolEnable","getBlockNum","getBlockNumber","userTokenBalance","userUniBalance","poolCount"],"mappings":"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","sourcesContent":["import ETHWallet from \"./ethWallet\";\nimport Decimal from \"decimal.js\"\nimport abis from \"@/utils/web3/contractABI/abis\";\nimport * as constant from \"@/utils/web3/constant\";\n\nimport {onChainCall, offChainCall} from \"./common\";\n\nlet contracts = null\nconst tokenDecimals = constant.defaultDecimals\n\nfunction loadContract() {\n  if(contracts === null) {\n    let web3Instance = ETHWallet.getWeb3Instance()\n    contracts = {\n      base: new web3Instance.eth.Contract(abis.erc20, constant.baseTokenAddr),\n      pool: new web3Instance.eth.Contract(abis.pool, constant.poolAddr),\n      unis: [],\n    }\n\n    for(let i = 0; i < constant.uniAddrs.length; i++) {\n      contracts.unis.push(\n        new web3Instance.eth.Contract(abis.erc20, constant.uniAddrs[i])\n      )\n    }\n  }\n}\n\nasync function commonApprove(contract, spender) {\n  Decimal.set({ toExpPos: 256 })\n  let maxApprove = new Decimal(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n\n  return await onChainCall(\n    contract,\n    ETHWallet.getAccount(),\n    \"approve\",\n    [spender, maxApprove.toString()],\n  )\n}\n\nasync function enableDeposit(pid) {\n  if(!ETHWallet.isConnected()) {\n    return\n  }\n  \n  loadContract()\n\n  let uni = contracts.unis[pid]\n  return commonApprove(uni, constant.poolAddr)\n}\n\nasync function commonERC20Balance(contract, address, outDecimal) {\n  let result = await offChainCall(contract, address, \"balanceOf\", [address])\n  if(result !== null) {\n    result = new Decimal(result).div(tokenDecimals)\n  } else {\n    result = new Decimal(0)\n  }\n\n  return outDecimal ? result:result.toDP(6, Decimal.ROUND_DOWN).toString()\n}\n\nasync function deposit(pid, amount) {\n  if(!ETHWallet.isConnected()) {\n    return\n  }\n\n  loadContract()\n\n  Decimal.set({ toExpPos: 256 })\n  amount = new Decimal(amount).mul(tokenDecimals)\n\n  return await onChainCall(\n    contracts.pool,\n    ETHWallet.getAccount(),\n    \"deposit\",\n    [pid, amount.toString()],\n    \"0\",\n  )\n}\n\nasync function withdraw(pid, amount) {\n  if(!ETHWallet.isConnected()) {\n    return\n  }\n\n  loadContract()\n  Decimal.set({ toExpPos: 256 })\n  amount = amount.mul(tokenDecimals)\n  return await onChainCall(\n    contracts.pool,\n    ETHWallet.getAccount(),\n    \"collect\",\n    [pid, amount.toString()],\n  )\n}\n\nasync function commonContractRead(contract, method, param = [], defVal = null) {\n  if(!ETHWallet.isConnected()) {\n    return defVal\n  }\n\n  loadContract()\n\n  let owner = ETHWallet.getAccount()\n  let result = await offChainCall(contract, owner, method, param)\n\n  return result !== null ? result:defVal\n}\n\nasync function poolInfo(pid) {\n  if(!ETHWallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  let owner = ETHWallet.getAccount()\n  let pool = await commonContractRead(contracts.pool, \"pools\", [pid], 0)\n  let user = await commonContractRead(contracts.pool, \"users\", [pid, owner], {stakeIn: 0,})\n  let userToCollect = await commonContractRead(contracts.pool, \"toBeCollectedOf\", [pid, owner], 0)\n  let poolToCollect = await commonContractRead(contracts.pool, \"toBeCollectedOfPool\", [pid], 0)\n  let totalWeight = await commonContractRead(contracts.pool, \"totalWeight\", [], 0)\n\n  let uni = contracts.unis[pid]\n  let uniBalance = await commonERC20Balance(uni, owner, false)\n\n  let orgStake = new Decimal(user.stakeIn).div(tokenDecimals)\n  user.stakeIn = new Decimal(user.stakeIn).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString()\n\n  poolToCollect = new Decimal(poolToCollect).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString()\n  userToCollect = new Decimal(userToCollect).div(tokenDecimals).toDP(4, Decimal.ROUND_FLOOR).toString()\n\n  return {\n    pool,\n    user,\n    poolToCollect,\n    userToCollect,\n    totalWeight,\n    orgStake,\n    uniBalance,\n  }\n}\n\n\nasync function ethBalance(outDecimal) {\n  let address = ETHWallet.getAccount()\n  let result = await ETHWallet.getWeb3Instance().eth.getBalance(address)\n    .catch(_=>{return null})\n  if(result !== null) {\n    result = new Decimal(result).div(1e18)\n  } else {\n    result = result = new Decimal(0)\n  }\n\n  return outDecimal ? result:result.toDP(6, Decimal.ROUND_DOWN).toString()\n}\n\nasync function commonApproveCheck(token, to) {\n  if(!ETHWallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  let owner = ETHWallet.getAccount()\n  let result = await offChainCall(token, owner, \"allowance\", [owner, to])\n\n  if(result !== null) {\n    let amount = new Decimal(result).div(tokenDecimals)\n    return amount.gt(0)\n  } else {\n    return false\n  }\n}\n\nasync function isPoolEnable(pid) {\n  if(!ETHWallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  try {\n    let uni = contracts.unis[pid]\n    return await commonApproveCheck(uni, constant.poolAddr);\n  } catch (e) {\n    return false\n  }\n}\n\nasync function getBlockNum() {\n  if(!ETHWallet.isConnected()) {\n    return 0\n  }\n\n  loadContract()\n\n  let web3Instance = ETHWallet.getWeb3Instance()\n  return await web3Instance.eth.getBlockNumber().catch(_=>{return 0})\n}\n\nasync function userTokenBalance() {\n  if(!ETHWallet.isConnected()) {\n    return 0\n  }\n\n  loadContract()\n  let user = ETHWallet.getAccount()\n  return commonERC20Balance(contracts.base, user, false)\n}\n\nasync function userUniBalance(pid) {\n  if(!ETHWallet.isConnected()) {\n    return 0\n  }\n\n  loadContract()\n\n  let uni = contracts.unis[pid]\n  let user = ETHWallet.getAccount()\n  return commonERC20Balance(uni, user, false)\n}\n\nasync function poolCount() {\n  if(!ETHWallet.isConnected()) {\n    return false\n  }\n\n  loadContract()\n\n  return commonContractRead(contracts.pool, \"poolsCount\", [])\n}\n\nexport default {\n  poolInfo,\n  enableDeposit,\n  deposit,\n  withdraw,\n  isPoolEnable,\n  getBlockNum,\n  userTokenBalance,\n  userUniBalance,\n  poolCount,\n}\n"]}]}