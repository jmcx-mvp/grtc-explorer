{"remainingRequest":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/thread-loader/dist/cjs.js!/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js!/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/common.js","dependencies":[{"path":"/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/common.js","mtime":1600769010000},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/thread-loader/dist/cjs.js","mtime":1599786627944},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js","mtime":1599578972213}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n\nvar transactionResultGetter = function transactionResultGetter(resolve, err, data) {\n  var result = null;\n\n  if (!err) {\n    result = data;\n  }\n\n  resolve(result);\n};\n\nfunction getContractMethod(contract, methodName) {\n  var methodsList = contract.abi;\n  var payable = false;\n  var constant = false;\n  var methodFunc = null;\n  var selector = \"\";\n  var paramTypes = [];\n  methodsList.forEach(function (m) {\n    if (methodName === m.name && \"function\" === m.type.toLowerCase()) {\n      methodFunc = contract[methodName];\n      payable = m.payable;\n      constant = m.constant;\n      selector = m.name + \"(\";\n      var param = [];\n\n      for (var i = 0; i < m.inputs.length; i++) {\n        param.push(m.inputs[i].type);\n        paramTypes.push(m.inputs[i].type);\n      }\n\n      selector = selector + param.join(\",\") + \")\";\n    }\n  });\n\n  if (!methodFunc) {\n    return null;\n  }\n\n  return {\n    payable: payable,\n    constant: constant,\n    func: methodFunc,\n    selector: selector,\n    paramTypes: paramTypes\n  };\n}\n\nfunction onChainCall(_x, _x2, _x3) {\n  return _onChainCall.apply(this, arguments);\n}\n\nfunction _onChainCall() {\n  _onChainCall = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(contract, methodName, param) {\n    var amount,\n        method,\n        sendParam,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            amount = _args.length > 3 && _args[3] !== undefined ? _args[3] : \"0\";\n            param = param || [];\n            method = getContractMethod(contract, methodName);\n\n            if (method) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n            sendParam = {\n              shouldPollResponse: false\n            };\n\n            if (method.payable) {\n              sendParam.callValue = tronWeb.toSun(amount);\n            }\n\n            _context.next = 9;\n            return method.func.apply(method, _toConsumableArray(param)).send(sendParam).catch(function (reason) {\n              return null;\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _onChainCall.apply(this, arguments);\n}\n\nfunction offChainCall(_x4, _x5, _x6) {\n  return _offChainCall.apply(this, arguments);\n}\n\nfunction _offChainCall() {\n  _offChainCall = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(contract, from, methodName) {\n    var param,\n        method,\n        _args2 = arguments;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            param = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : [];\n            param = param || [];\n            method = getContractMethod(contract, methodName);\n\n            if (method) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", null);\n\n          case 5:\n            _context2.next = 7;\n            return new Promise(function (resolve) {\n              method.func.apply(method, _toConsumableArray(param)).call({\n                from: from\n              }, function (err, result) {\n                transactionResultGetter(resolve, err, result);\n              }).catch(function (reason) {\n                transactionResultGetter(resolve, reason, null);\n              });\n            });\n\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _offChainCall.apply(this, arguments);\n}\n\nfunction callByTrxTransactionBuilder(_x7, _x8, _x9) {\n  return _callByTrxTransactionBuilder.apply(this, arguments);\n}\n\nfunction _callByTrxTransactionBuilder() {\n  _callByTrxTransactionBuilder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(addr, method, param) {\n    var defVal,\n        tx,\n        _args3 = arguments;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            defVal = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : null;\n            _context3.next = 3;\n            return tronWeb.transactionBuilder.triggerConstantContract(addr, method, {}, param).catch(function (e) {\n              return null;\n            });\n\n          case 3:\n            tx = _context3.sent;\n\n            if (!(tx === null)) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", defVal);\n\n          case 6:\n            return _context3.abrupt(\"return\", tx.constant_result);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _callByTrxTransactionBuilder.apply(this, arguments);\n}\n\nexport { onChainCall, offChainCall, callByTrxTransactionBuilder };",{"version":3,"sources":["/Users/lyx/WebstormProjects/tefi-geyser/src/utils/web3/common.js"],"names":["transactionResultGetter","resolve","err","data","result","getContractMethod","contract","methodName","methodsList","abi","payable","constant","methodFunc","selector","paramTypes","forEach","m","name","type","toLowerCase","param","i","inputs","length","push","join","func","onChainCall","amount","method","sendParam","shouldPollResponse","callValue","tronWeb","toSun","send","catch","reason","offChainCall","from","Promise","call","callByTrxTransactionBuilder","addr","defVal","transactionBuilder","triggerConstantContract","e","tx","constant_result"],"mappings":"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","sourcesContent":["let transactionResultGetter = function (resolve, err, data) {\n  let result = null\n  if(!err) {\n    result = data\n  }\n\n  resolve(result)\n}\n\nfunction getContractMethod(contract, methodName) {\n  let methodsList = contract.abi\n\n  let payable = false\n  let constant = false\n  let methodFunc = null\n  let selector = \"\"\n  let paramTypes = []\n\n  methodsList.forEach(m => {\n    if(methodName === m.name && \"function\" === m.type.toLowerCase()) {\n      methodFunc = contract[methodName]\n      payable = m.payable\n      constant = m.constant\n\n      selector = m.name + \"(\"\n      let param = []\n      for(let i=0; i<m.inputs.length; i++) {\n        param.push(m.inputs[i].type)\n        paramTypes.push(m.inputs[i].type)\n      }\n\n      selector = selector + param.join(\",\") + \")\"\n    }\n  })\n\n  if(!methodFunc) {\n    return null\n  }\n\n  return {\n    payable: payable,\n    constant: constant,\n    func: methodFunc,\n    selector: selector,\n    paramTypes: paramTypes,\n  }\n}\n\nasync function onChainCall(contract, methodName, param, amount = \"0\") {\n  param = param  || []\n\n  let method = getContractMethod(contract, methodName)\n  if(!method) {\n    return null\n  }\n\n  let sendParam = {\n    shouldPollResponse: false\n  }\n\n  if(method.payable) {\n    sendParam.callValue = tronWeb.toSun(amount)\n  }\n\n  return await method.func(...param).send(sendParam)\n    .catch(reason => {\n      return null\n    })\n}\n\nasync function offChainCall(contract, from, methodName, param = []) {\n  param = param || []\n\n  let method = getContractMethod(contract, methodName)\n  if(!method){\n    return null\n  }\n\n  return  await new Promise(resolve => {\n    method.func(...param).call({from: from}, (err, result) => {\n      transactionResultGetter(resolve, err, result)\n    }).catch(reason => {\n      transactionResultGetter(resolve, reason, null)\n    })\n  })\n}\n\nasync function callByTrxTransactionBuilder(addr, method, param, defVal = null) {\n  let tx = await tronWeb.transactionBuilder.triggerConstantContract(addr,method, {},  param)\n    .catch(e=>{\n      return null\n    })\n\n  if(tx === null) {\n    return defVal\n  }\n  return  tx.constant_result\n}\n\nexport {\n  onChainCall,\n  offChainCall,\n  callByTrxTransactionBuilder,\n}\n"]}]}