{"remainingRequest":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyx/WebstormProjects/avg-geyser/src/views/dashboard/actions/Burn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyx/WebstormProjects/avg-geyser/src/views/dashboard/actions/Burn.vue","mtime":1599645386000},{"path":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/babel-loader/lib/index.js","mtime":1599578972213},{"path":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/avg-geyser/node_modules/vue-loader/lib/index.js","mtime":1599786628079}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport chainOpt from \"../../../utils/web3/chainOperation\";\n// Import component\nimport Loading from 'vue-loading-overlay';\n// Import stylesheet\nimport 'vue-loading-overlay/dist/vue-loading.css';\nimport Decimal from \"decimal.js\";\n\nlet opt = chainOpt.opt\nexport default {\n  name: \"Burn\",\n  props: [\"hideBurn\", \"allBalance\"],\n\n  components: {\n    Loading\n  },\n\n  data(){\n    return {\n      burnAmount: \"0\",\n      willUnlock: \"0\",\n      loading: false,\n    }\n  },\n\n  watch: {\n    burnAmount() {\n      this.willUnlock = this.burnAmount\n    }\n  },\n\n  methods: {\n    async burn() {\n      let tokenAmount = 0\n      let validUnlock = false\n      try {\n        Decimal.set({ toExpPos: 256 })\n        tokenAmount = new Decimal(this.burnAmount)\n        validUnlock = tokenAmount.lte(new Decimal(this.allBalance.syn))\n      } catch (e) {\n        setTimeout(_=>{\n          this.$notification.open({\n            message: 'Invalid Input!',\n            description: \"Amount must be a number\",\n            duration: 0,\n          });\n          this.loading = false\n        }, 400)\n\n        return\n      }\n\n\n\n      this.loading = true\n      if(!validUnlock) {\n        this.loading = false\n        this.$notification.open({\n          message: 'Burn amount exceed!',\n          description: validUnlock,\n          duration: 0,\n        });\n        return\n      }\n\n      let unlockResult = await opt.burnSyn(tokenAmount)\n      if(unlockResult !== null){\n        console.log(\"mint transaction send success, tx hash is: \", unlockResult)\n      } else {\n        //user cancel or other unknown things happened, do nothing\n      }\n\n      this.loading = false\n      if(typeof this.hideBurn === \"function\") {\n        this.hideBurn()\n      }\n    }\n  },\n}\n",{"version":3,"sources":["Burn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Burn.vue","sourceRoot":"src/views/dashboard/actions","sourcesContent":["<template>\n  <div class=\"row text-center burn-div\">\n    <div class=\"col\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <img class=\"burn-logo\" :src=\"'/static/like-to-do/burn.png'\" :alt=\"$t('token.name')\"/>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <p class=\"burn-tit\">{{ $t(\"action.burn\") }}</p>\n          <p class=\"burn-txt\">{{ $t(\"dashboard.burn.txt\") }}</p>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <p class=\"burn-input-txt\">{{ $t(\"dashboard.burn.confirm\") }}</p>\n          <input type=\"text\" v-model=\"burnAmount\" placeholder=\"0.00\" class=\"burn-input\">\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-6 text-left notes-txt\">\n          {{ $t(\"dashboard.burn.unlock\") }} {{willUnlock}} {{ $t(\"token.name\") }}\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <input type=\"submit\" class=\"btn btn-info btn-burn-now\" value=\"Burn Now\"\n                 @click=\"burn\"\n          >\n        </div>\n      </div>\n    </div>\n\n    <loading :active.sync=\"loading\"\n             :can-cancel=\"false\"\n             :is-full-page=\"true\"></loading>\n  </div>\n</template>\n\n<script>\nimport chainOpt from \"../../../utils/web3/chainOperation\";\n// Import component\nimport Loading from 'vue-loading-overlay';\n// Import stylesheet\nimport 'vue-loading-overlay/dist/vue-loading.css';\nimport Decimal from \"decimal.js\";\n\nlet opt = chainOpt.opt\nexport default {\n  name: \"Burn\",\n  props: [\"hideBurn\", \"allBalance\"],\n\n  components: {\n    Loading\n  },\n\n  data(){\n    return {\n      burnAmount: \"0\",\n      willUnlock: \"0\",\n      loading: false,\n    }\n  },\n\n  watch: {\n    burnAmount() {\n      this.willUnlock = this.burnAmount\n    }\n  },\n\n  methods: {\n    async burn() {\n      let tokenAmount = 0\n      let validUnlock = false\n      try {\n        Decimal.set({ toExpPos: 256 })\n        tokenAmount = new Decimal(this.burnAmount)\n        validUnlock = tokenAmount.lte(new Decimal(this.allBalance.syn))\n      } catch (e) {\n        setTimeout(_=>{\n          this.$notification.open({\n            message: 'Invalid Input!',\n            description: \"Amount must be a number\",\n            duration: 0,\n          });\n          this.loading = false\n        }, 400)\n\n        return\n      }\n\n\n\n      this.loading = true\n      if(!validUnlock) {\n        this.loading = false\n        this.$notification.open({\n          message: 'Burn amount exceed!',\n          description: validUnlock,\n          duration: 0,\n        });\n        return\n      }\n\n      let unlockResult = await opt.burnSyn(tokenAmount)\n      if(unlockResult !== null){\n        console.log(\"mint transaction send success, tx hash is: \", unlockResult)\n      } else {\n        //user cancel or other unknown things happened, do nothing\n      }\n\n      this.loading = false\n      if(typeof this.hideBurn === \"function\") {\n        this.hideBurn()\n      }\n    }\n  },\n}\n</script>\n\n\n<style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n@import \"../../../styles/colors.scss\";\n@import \"../../../styles/fonts.scss\";\n\n.burn-div {\n  flex: 1 1 0;\n  padding: 24px 0;\n\n  .burn-logo {\n    width: 180px;\n    height: 180px;\n  }\n\n  .burn-tit {\n    font-size: 32px;\n    color: $fontColor;\n    letter-spacing: 2px;\n    margin: 15px 0 15px;\n    font-family: $fontTit;\n  }\n  .burn-txt,\n  .burn-input-txt {\n    font-size: 16px;\n    color: $txtColor;\n    font-weight: 400;\n    font-family: $fontTxt;\n  }\n  .burn-input-txt {\n    margin-top: 30px;\n  }\n  .burn-input {\n    width: 100%;\n    height: 54px;\n    background-color: $bg;\n    font-size: 24px;\n    color: $fontColor;\n    padding: 16px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: $divBorderColor;\n    border-image: initial;\n    border-radius: 20px;\n    outline: none;\n    margin-bottom: 12px;\n    font-family: $fontTxt;\n  }\n\n  .notes-txt {\n    color: $notesColor;\n    font-family: $fontTxt;\n    font-size: 10px;\n    line-height: 18px;\n    letter-spacing: 0.5px;\n    font-weight: 400;\n  }\n\n  .btn-burn-now {\n    color: $btnFontColor;\n    background-color: $btnBg;\n    font-family: $fontTit;\n    width: 100%;\n    height: 72px;\n    margin-top: 30px;\n    text-transform: uppercase;\n    cursor: pointer;\n    border-width: 1px;\n    border-style: solid;\n    border-color: $divBorderColor;\n    border-image: initial;\n    border-radius: 5px;\n    transition: all 0.1s ease-in 0s;\n  }\n}\n</style>\n"]}]}