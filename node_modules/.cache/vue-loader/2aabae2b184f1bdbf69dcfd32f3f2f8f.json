{"remainingRequest":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyx/WebstormProjects/tefi-geyser/src/components/Countdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyx/WebstormProjects/tefi-geyser/src/components/Countdown.vue","mtime":1600697026000},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/babel-loader/lib/index.js","mtime":1599578972213},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/cache-loader/dist/cjs.js","mtime":1599786627641},{"path":"/Users/lyx/WebstormProjects/tefi-geyser/node_modules/vue-loader/lib/index.js","mtime":1599786628079}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Countdown',\n  props: [ \"dateTime\", \"bigText\"],\n  data() {\n    return {\n      d: '',\n      h: '',\n      m: '',\n      s: '',\n    }\n  },\n  created() {\n    this.countTime()\n  },\n  methods: {\n    countTime() {\n      let date = new Date()\n      let now = date.getTime()\n      let endDate = new Date(this.dateTime.replace(/\\s/, 'T').concat('.000+08:00'))\n      let end = endDate.getTime()\n\n      let leftTime = end - now\n\n      if (leftTime >= 0) {\n        this.d = Math.floor(leftTime / 1000 / 60 / 60 / 24)\n        this.h = Math.floor((leftTime / 1000 / 60 / 60) % 24)\n        this.m = Math.floor((leftTime / 1000 / 60) % 60)\n        this.s = Math.floor((leftTime / 1000) % 60)\n      }\n\n      this.h = (this.h < 10) ? \"0\" + this.h : this.h\n      this.m = this.m < 10 ? \"0\" + this.m : this.m\n      this.s = this.s < 10 ? \"0\" + this.s : this.s\n\n      setTimeout(this.countTime, 3000)\n    },\n  },\n}\n",{"version":3,"sources":["Countdown.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Countdown.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"countdown-div\" :class=\"bigText ? 'big':''\">\n    <span class=\"countdown-txt\">{{$t(\"date.countdown\") }}</span>\n    <b class=\"countdown-txt\">{{ d }}{{ $t(\"date.day\") }}</b>\n    <b class=\"countdown-txt\">{{ h }}</b>:\n    <b class=\"countdown-txt\">{{ m }}</b>:\n    <b class=\"countdown-txt\">{{ s }}</b>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Countdown',\n  props: [ \"dateTime\", \"bigText\"],\n  data() {\n    return {\n      d: '',\n      h: '',\n      m: '',\n      s: '',\n    }\n  },\n  created() {\n    this.countTime()\n  },\n  methods: {\n    countTime() {\n      let date = new Date()\n      let now = date.getTime()\n      let endDate = new Date(this.dateTime.replace(/\\s/, 'T').concat('.000+08:00'))\n      let end = endDate.getTime()\n\n      let leftTime = end - now\n\n      if (leftTime >= 0) {\n        this.d = Math.floor(leftTime / 1000 / 60 / 60 / 24)\n        this.h = Math.floor((leftTime / 1000 / 60 / 60) % 24)\n        this.m = Math.floor((leftTime / 1000 / 60) % 60)\n        this.s = Math.floor((leftTime / 1000) % 60)\n      }\n\n      this.h = (this.h < 10) ? \"0\" + this.h : this.h\n      this.m = this.m < 10 ? \"0\" + this.m : this.m\n      this.s = this.s < 10 ? \"0\" + this.s : this.s\n\n      setTimeout(this.countTime, 3000)\n    },\n  },\n}\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n@import \"../styles/colors.scss\";\n@import \"../styles/fonts.scss\";\n\n.countdown-div {\n  .countdown-txt {\n    font-family:\"Kaushan Script\", \"Noto Sans\", sans-serif;\n    font-size: 14px;\n  }\n}\n\n.countdown-div.big {\n  //margin-top: 20px;\n  margin-bottom: 30px;\n\n  .countdown-txt {\n    font-family:\"Kaushan Script\", \"Noto Sans\", sans-serif;\n    font-size: 24px;\n    font-weight: 300;\n  }\n}\n\n</style>\n"]}]}